#ifndef     __MENU_H_
#define     __MENU_H_
#include "data_type.h"
#define     MENU_DISPLAY_START_ROW      0       //显示的起始行，从0行开始每行8个点阵
#define     MENU_DISPLAY_START_COL      0       //显示的起始列，从0开始每一列1个点阵
#define     MENU_MAX_ROW                4
#define     MENU_MAX_ROW                4


#define		DISPLAY_CENTER				0x01
#define		DISPLAY_LEFT				0x02
#define		DISPLAY_RIGHT				0x03


/*
#define	KEY_11			9
#define	KEY_22			10
#define	KEY_33			11
#define	KEY_44			8
#define	KEY_55			6
#define	KEY_66			7
#define	KEY_77			4
#define	KEY_88			5
#define	KEY_99			3
#define	KEY_00			1
#define	KEY_ENTER_1		2
#define	KEY_COMM_1		0
#define	KEY_POWER_1		15
#define	KEY_F1_1	        12
#define	KEY_F2_1	        13
#define	KEY_F3_1	        14
#define	KEY_UP_1			19//20
#define	KEY_DOWN_1		18//21
*/

#define  EXIT_KEY_COMM   0
#define  EXIT_KEY_0      1
#define  EXIT_KEY_ENT    2
#define  EXIT_KEY_9      3
#define  EXIT_KEY_7      4
#define  EXIT_KEY_8      5
#define  EXIT_KEY_5      6
#define  EXIT_KEY_6      7
#define  EXIT_KEY_4      8
#define  EXIT_KEY_1      9
#define  EXIT_KEY_2      10
#define  EXIT_KEY_3      11
#define  EXIT_KEY_F1     12
#define	 EXIT_KEY_F2	 13
#define  EXIT_KEY_F3     14
#define  EXIT_KEY_POWER 15
#define  EXIT_KEY_UP     19
#define  EXIT_KEY_DOWN   18


#define	DISP_CURRENT	0x0000
#define	DISP_POSITION	0x0001
#define	DISP_CENTER		0x0002
#define	DISP_RIGHT		0x0003
#define	DISP_NORMAL		0x0000
#define	DISP_REVERSE	0x0004
#define DISP_7x9		0x0000
#define DISP_5x7		0x0008
#define DISP_CLRLINE	0x0010
#define DISP_CLRSCR		0x0020



typedef  struct{

	int xx ;//选项描述字符在一行内的显示坐标（0―127）。 
	
	char pstr[18];// 选项描述字符串指针。
}SELE_UNIT;


typedef struct{
		int count ;//选项的个数。
		int line;// 显示的行数，表示在哪一行显示选择。 
		char flagch ;//指示当前选择项的标志字符，
		//如果等于0则为默认的字符‘◆’。
		int defsele;// 进入函数时默认选择的选项序号。
		SELE_UNIT selepstr[4] ;//选项定义结构数组，
		int autoexit;// 自动退出的时间，用于实现无按键自动关机功能。
		//如等于0表示不使用自动退出功能，
		//如果大于0则表示无按键延迟时间（以秒为单位），
		//该参数必须配合qEvent参数中的EXIT_AUTO_QUIT常量标志才有效，否则无效。 
		long qEvent;//退出事件。该参数接受以下常量：

}SELE_INLINE;


typedef struct 
{
	int				qx,qy;		//提示语句显示坐标
	char			*pPrompt;	//提示语句
	char			sFont;		//字体大小		== 0 大字体(英汉)	== 1 小字体
	char			alpha;		//是否允许输入字母、符号
	char			nullEnable;	//允许输入空字符
	char			*pStr;		//初始字符串&返回字符串
	char			csChar;		//光标字符		== 0	无效
	char			pwChar;		//密码显示字符	== 0	无效
	char			spChar;		//分隔显示符	== 0	无效
	int				minNum;		//最少接收字符串
	int				maxNum;		//最多接收字符串
	long			minValue;	//接收的最小值
	long			maxValue;	//接收的最大值
	int				retNum;		//初始字符串个数&返回字符串个数  输入 == 0 不使用初始值
	long			retValue;	//返回字符串值
	int                     flimited;	//小数点后个数限制
}GETSTR_PARAM;



//**********************************************************************************************************************
//CRC校验
//**********************************************************************************************************************
void Add_CRC_11021(unsigned char *databuf,int datalen);
void Add_CRC_11021_2(unsigned char *databuf,int datalen,unsigned char *crcbuf);
unsigned int ValidityCalcrc(int initvalue, unsigned char * buffer , int length );
//**********************************************************************************************************************
//将输入的字符串中的所有某个字符替换成另一字符
//**********************************************************************************************************************
void ChangeChar(char *rBuf, int intDigit, char rChar, char sChar);
//**********************************************************************************************************************
//将输入的字符串中的所有某个字符替换成另一字符串对应位置之字符
//**********************************************************************************************************************
void ChangeString(char *rBuf, char * sBuf, int intDigit, char rChar);
//**********************************************************************************************************************
//提示对话框
//**********************************************************************************************************************
int Confirmation(char * rBuf, char * button1, char * button2, int defaultbutton);						//单行
int Confirmation_(char * rBuf1, char * rBuf2, char * button1, char * button2, int defaultbutton);		//双行
//**********************************************************************************************************************
//等待mscount毫秒
//**********************************************************************************************************************
//void EA_uiInkeyMs (signed long ms);
//void Sleep(int mscount);
//**********************************************************************************************************************
//在qx列，qy行显示字符或字符串
//xyFlag & 0x3==0 	在当前位置显示	DISP_CURRENT
//xyFlag & 0x3==1 	在指定位置显示	DISP_POSITION
//xyFlag & 0x3==2 	居中显示		DISP_CENTER
//xyFlag & 0x3==3 	右对齐显示		DISP_RIGHT
//xyFlag & 0x4==0 	正常显示		DISP_NORMAL
//xyFlag & 0x4!=0 	反显			DISP_REVERSE
//xyFlag & 0x8==0 	7x9字体			DISP_7x9
//xyFlag & 0x8!=0 	5x7字体			DISP_5x7
//xyFlag & 0x10!=0 	清除指定行		DISP_CLRLINE
//xyFlag & 0x20!=0 	清除屏幕		DISP_CLRSCR
//**********************************************************************************************************************
//void DispChar_E (int qx, int qy, char eChar, int xyFlag);			//显示英文字符
//void DispStr_C (int qx, int qy, char * cStr, int xyFlag);			//显示中文字符串
//void DispStr_CE (int qx, int qy, char * ceStr, int xyFlag);			//显示中英文字符串
//void DispStr_E (int qx, int qy, char * eStr, int xyFlag);			//显示英文字符串
//**********************************************************************************************************************
//显示当前系统日期时间
//**********************************************************************************************************************
//void DispDate(int intRow);											//显示日期
//void DispDateTime(int intRow);										//显示日期时间
//void DispTime(int intRow);											//显示时间
//void DispTime_(int intRow);											//带秒显示时间
//**********************************************************************************************************************
//下载文件, sFile 文件名; RStr 缓存; MaxLen 缓存区大小
//返回值	> 0	成功，返回为接收文件的大小
//			-1	接收PC机指令超时
//			-2	PC机指令错误
//			-3	PC机指令错误(nl)
//			-4	PC机指令错误(n)
//			-5	PC机指令错误(l)
//			-6	长度校验有误(n)
//			-7	缓存区不足(l)
//			-8	PC机指令错误(s)
//			-9	数据通讯超时(s)
//			-10	数据校验有误(s)
//**********************************************************************************************************************
//long DownLoadData(char * sFile, unsigned char * RStr, unsigned long MaxLen);
//**********************************************************************************************************************
//上传文件, sFile 文件名; sAddr FLASH地址; sLen 上传大小; RecCount 记录数; rsFlag = 1, 重写, 0 追加;
//返回值	1	成功
//			-1	接收PC机指令超时
//			-2	内存分配失败
//			-3	PC机指令错误
//			-4	PC机指令错误(a)
//			-5	PC机指令错误(nl)
//			-6	PC机指令错误(n)
//			-7	PC机指令错误(g)
//			-8	PC机指令错误(%)
//			-9	PC机指令错误(s)
//			-10	PC机返回错误(s)
//**********************************************************************************************************************
//int UpLoadFlashRecord(char *sFile, unsigned long sAddr, unsigned long sLen, unsigned long RecCount, int rsFlag);
//**********************************************************************************************************************
//密码合成，bit表示要合成几位 iBuf为输入参数 oBuf为输出参数
//**********************************************************************************************************************
//void EncryptString(char * iBuf, char * oBuf, int intDigit);
//******************************************************错误提示音******************************************************
//void ErrorBeep(char sound);	//0：短音，1：长音
//******************************************************正确提示音******************************************************
//void RightBeep(void);
//**********************************************************************************************************************
//FLASH初始化	block_address FLASH地址	返回 0 成功 其它值失败
//**********************************************************************************************************************
//int FLASH_erase_block_2(void * block_address);
//**********************************************************************************************************************
//写FLASH	fAddr FLASH地址, fBuf 缓存	fLength 大小, 返回 1 成功，其它值失败
//**********************************************************************************************************************
//int FLASH_write_data_64K(unsigned long fAddr, unsigned char * fBuf, unsigned long fLength);		//单块 64K
//int FLASH_write_data_8M(unsigned long fAddr, unsigned char * fBuf, unsigned long fLength);		//全地址写
//**********************************************************************************************************************
//int HexToStr(char *pStr1, char * pStr2);
//**********************************************************************************************************************
//输入英文字符串
//返回值	== 0  正确输入
//			== 1  未输入字符
//			== -1 按退出键
//			== -2 拔卡退出
//			== -3 按FUNC2退出
//			== -4 按FUNC1退出
//**********************************************************************************************************************
//int huGetStr_E (struct GETSTR_PARAM *gsParam);
//**********************************************************************************************************************
//去除字符串左右空格并前补字符
//**********************************************************************************************************************
//void LRepairChar(unsigned char * rBuf, unsigned char sChar);
//**********************************************************************************************************************
//按任意键
//**********************************************************************************************************************
//int PressAnyKey(void);
//**********************************************************************************************************************
//按ENTER键 OR CLR键与POWER键, ENTER键 返回 1, CLR键与POWER键 返回 -1
//**********************************************************************************************************************
//int PressCmdKey(void);
//**********************************************************************************************************************
//读键盘函数，并在指定位置回显
//用户取消返回-1，成功返回所输入的位数
//rBuf 			缓存区
//intDigit		总位数
//PosX, PosY	位置
//blnPass		0 明文方式	!= 0 密码方式
//intDecimal 	小数位数， = 0表示没有小数
//**********************************************************************************************************************
int ReadNumeric(char *rBuf, int intDigit, int PosX, int PosY, int intDecimal);			//读数字带小数点
int ReadNumeric_(char *rBuf, int intDigit, int PosX, int PosY);							//可分隔输入数字，就像输入IP样式
int ReadNumericAndFunKey(char *rBuf, int intDigit, int PosX, int PosY, int intDecimal);	//用户按功能键返回值为intDigit + 10;
int ReadNumeric_signed(char * rBuf, int intDigit, int PosX, int PosY);					//可输入 "-" 号，表示负数
int ReadString(char *rBuf, int intDigit, int PosX, int PosY, int blnPass);				//输入字符串
int ReadStringFont5x7(char *rBuf, int intDigit, int PosX, int PosY, int blnPass);		//小字体输入字符串
//**********************************************************************************************************************
//去除字符串空格
//**********************************************************************************************************************
//void RTrimEmpty(unsigned char * iBuf);		//去除右空格
//void TrimEmpty(unsigned char * iBuf);		//去除左右空格
//**********************************************************************************************************************
//菜单选择
//mBuf 菜单缓存	mCount 菜单数	mPtr = 0 非显示菜单模式	1 菜单模式
//**********************************************************************************************************************
//void DispMenu (char * mBuf, int mCount, int linePtr, int REV);
//int SelectMenu (char * mBuf, int mCount, int mPtr);
//**********************************************************************************************************************
//在字符串中查找第一次出现指定字符的位置
//**********************************************************************************************************************
//int StrFind(char * s, char c);
//**********************************************************************************************************************
//将字符串数字形数据转成数字形数据
//**********************************************************************************************************************
//float String2Float(char * s);						//转换成浮点数
//unsigned long String2Long(char * s);				//转换成长整形
//**********************************************************************************************************************
//发送接收串口数据
//**********************************************************************************************************************
//void UART_immediacy_send(char * lb, int len);		//发送
//unsigned char UART_Wait_String(unsigned int timeout, unsigned char * Response, unsigned char intlen );	//接收数据




// // *****************************************************************
// // 功能：		菜单浏览选择
// // 入口参数：
// //				
// // 出口参数：	Null
// // 作者：
// //返回值：		-1	菜单不正确
// //				-5	返回上级菜单
// //				>=0 选择的菜单或者进入函数
// // 函数出处：
// // *****************************************************************
//short browse_menu(int startline,unsigned char *p_menu,int *p_cPtr,int *p_lPtr );


// // *****************************************************************
// // 功能：		等待按键返回
// // 入口参数：
// //				
// // 出口参数：	Null
// // 作者：
// //返回值：		-1	超时关机
// //				>=0 选择的按键返回
// // 函数出处：
// // *****************************************************************
long   delay_and_wait_key(int second,long qEvent, int autoexit );


// *****************************************************************
// 功能：在屏幕上输出字符
// 入口参数：	lb->显示输出字符
// 出口参数：	Null
// 作者：
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
void u_puts(char *lb);


/*****************************************************************
函数原型：TRACE
功能描述：调试输出，类似printf，在屏幕上循环显示
参数描述：无
参数名称：	输入/输出？	类型		描述
-----------		-----------	------	   	-------
返 回 值：有
*****************************************************************/
void TRACE(char * fmt, ...);


/*****************************************************************
函数原型：TRACE
功能描述：调试输出，类似printf，在屏幕上循环显示
参数描述：无
参数名称：	输入/输出？	类型		描述
-----------		-----------	------	   	-------
返 回 值：有
*****************************************************************/
void TRACE232(char * fmt, ...);


// *****************************************************************
// 功能：		延时i毫秒
// 入口参数：	i->延时时间
// 出口参数：	Null
// 作者：
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
void delay_n_ms(short i);


// *****************************************************************
// 功能：		ASCII码转BCD码
// 入口参数：	bcdbuf->需要转化的字符串
//				retbuf->转化后的输出
//				bcdnum->要转化的数据长度
// 出口参数：	Null
// 作者：
//返回值：		-1	F1退出
//				0	选择否
//				1	选择是						
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************	
int code_BCD(char *bcdbuf,char *retbuf,int bcdnum);


// *****************************************************************
// 功能：		BCD码转ASCII码
// 入口参数：	bcdbuf->需要转化的字符串
//				retbuf->转化后的输出
//				bcdnum->要转化的数据长度
// 出口参数：	Null
// 作者：				
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
void decode_BCD(char *bcdbuf,char *retbuf,int bcdnum);


// *****************************************************************
// 功能：		得到当前的日期和星期
// 入口参数：	disp_line->在屏幕上显示的行数
//				langue_type->显示的语言类型(EN/CN)
// 出口参数：	Null
// 作者：	
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
void get_current_date_week(int disp_line, int langue_type);


// *****************************************************************
// 功能：		通过年月日得到星期代码
// 入口参数：	year->年
//				month->月
//				date->日
// 出口参数：	Null
// 返回:		0	1	2	3	4	5	6
//				星期日	星期一	星期二	星期三	星期四	星期五	星期六
// 作者：	
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
int get_week(int year,int month,int date);


// *****************************************************************
// 功能：		浏览菜单
// 入口参数：	startline->起始行
//				p_menu->菜单
//				p_cPtr->当前行
//				p_lPtr->在菜单中所处的位置
// 出口参数：	Null
// 返回:		
// 作者：	
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
int Cal_CRC(uchar * data_to_cal_crc, int length);


/******************************************************************************
 函数名称：htoa
 功能描述：hex转换为ascii码
 参数描述：
 参数名称： 输入/输出？ 类型		描述
				
 返  回  值：ok(0)-成功
				notok(0xFF)-失败
				   
 作 	 者 ：许岩
 日 	 期：2005-04-07
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void htoa(void *des,INT8U *sour, int hex_len);


/******************************************************************************
 函数名称：EA_ucClrKeyBuf
 功能描述：读空键值
 参数描述：
 参数名称： 输入/输出？ 类型		描述
				
 返  回  值：无
				   
 作 	 者 ：许岩
 日 	 期：2005-04-07
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
//void EA_ucClrKeyBuf(void);


/******************************************************************************
函数名称：get_key
功能描述：得到一个按键，死等，只接受1234567890
参数描述：无

返  回  值	：该键值
作      者	：张坛
日      期：2005-04-08
修改历史：
日期		修改人		修改描述
------		---------	---------
******************************************************************************/
//unsigned char get_key(void);


/******************************************************************************
 函数名称：trans_key
 功能描述：转换键值到ascii码
 参数描述：
 参数名称： 输入/输出？ 类型		描述
	lKeyRet		输入		long		delay_and_wait_key的返回值，只接受0-9

 返  回  值：ascii码的键值
				   
 作 	 者 ：许岩
 日 	 期：2005-04-07
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
//unsigned char trans_key(long lKeyRet);


/******************************************************************************
 函数名称：ascii_to_hex
 功能描述：把一个0-9的ascii代码，转化为16进制数
 参数名称： 输入/输出？ 类型        描述
 num        输入        INT8U           要转化为ascii代码的数，要求范围0-9

 返  回  值：转化后的16进制数

 作      者 ：许岩
 日      期：2004-09-02
 修改历史：
		日期        修改人      修改描述
		------      ---------   -------------
******************************************************************************/
//unsigned char  ascii_to_hex(unsigned char  num);

/******************************************************************************
 函数名称：a_to_h
 功能描述：把一个0-9,a-f,A-F的ascii代码，转化为16进制数
 参数名称： 输入/输出？ 类型        描述
 num        输入        INT8U           要转化为ascii代码的数，要求范围0-9

 返  回  值：转化后的16进制数

 作      者 ：许岩
 日      期：2004-09-02
 修改历史：
		日期        修改人      修改描述
		------      ---------   -------------
******************************************************************************/
unsigned char  a_to_h(INT8U  num);

/*****************************************************************
函数原型：bcdhex
功能描述：bcd码转换为hex码
参数描述：
参数名称：	输入/输出？	类型		描述
-----------		-----------	------	   	-------
bcd				输入			INT8U		输入的bcd码

返  回  值：转换后的hex码
作      者	：许岩
日      期：2006-01-09
修改历史：
日期		修改人		修改描述
------		---------	-------------
*****************************************************************/
unsigned char bcdhex(unsigned char  bcd);


/******************************************************************************
 函数名称：ascii
 功能描述：把一个0-9的数转化为ascii代码，此函数也可扩展用于通讯中，通讯中涉及到一些A-F的非法输入，认为合法
 参数名称：	输入/输出？	类型		描述
 num		输入		INT8U			要转化为ascii代码的数，要求范围0-9
 
 返  回  值：转化后的ascii代码
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
INT8U ascii(INT8U num);

/******************************************************************************
 函数名称：Halt_HD6305
 功能描述：休眠手持机
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void Halt_HD6305 (void);

/******************************************************************************
 函数名称：modify_date
 功能描述：修改时钟日期
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void modify_date(void);

/******************************************************************************
 函数名称：modify_time
 功能描述：修改时钟时间
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void modify_time(void);

/******************************************************************************
 函数名称：DispStr_CE
 功能描述：显示汉字
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
//void DispStr_CE (int qx,int qy,char *ceStr,int xyFlag);

/******************************************************************************
 函数名称：ClearLine
 功能描述：清空一行
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/

//void ClearLine (int line,int sFont);


// *****************************************************************
// 功能：		选择确认项
// 入口参数：	line->确认菜单行号
//				strdisp->确认内容
// 出口参数：	Null
// 作者：
//返回值：		-1	<C>退出
//				0	选择否
//				1	选择是						
// 函数出处：EH0218---COMMON.C例子程序
// *****************************************************************
//int select_affirm(int line,char *strdisp);

// // *****************************************************************
// // 功能：		菜单浏览选择
// // 入口参数：
// //				
// // 出口参数：	Null
// // 作者：
// //返回值：		-1	菜单不正确
// //				-5	返回上级菜单
// //				>=0 选择的菜单或者进入函数
// // 函数出处：
// // *****************************************************************
int select_in_line( SELE_INLINE * ss);

/******************************************************************************
 函数名称：DispStr_CE
 功能描述：显示汉字
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返回值		== 0  正确输入
			== 1  未输入字符
			== -1 按退出键
			== -2 拔卡退出
			== -3 按FUNC2退出
			== -4 按FUNC1退出
 
 作      者	：许岩
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
//int huGetStr_E ( GETSTR_PARAM *gsParam);

/******************************************************************************
 函数名称：print_record
 功能描述：打印充值记录
 参数名称：输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：于福勇
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void print_record (RECORD *prec);


/******************************************************************************
 函数名称：print_sale_record
 功能描述：打印售卡记录
 参数名称：输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：于福勇
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void print_sale_record (void);

// *****************************************************************
// 功能：		GPRS_Input_IP
// 说明:		手工输入IP地址
// 入口参数：	
// 出口参数：	Null
// 作者：
// 返回值：	-1 关机							
// *****************************************************************
// *****************************************************************
// 功能：		GPRS_Input_IP
// 说明:		手工输入IP地址
// 入口参数：	
// 出口参数：	Null
// 作者：
// 返回值：	-1 关机							
// *****************************************************************
INT8U GPRS_Input_IP(void);



/******************************************************************************
 函数名称：print_work_note
 功能描述：打印日结算票据
 参数名称：输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：于福勇
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
void print_work_note (void);

/******************************************************************************
 函数名称：Power_Down
 功能描述：休眠手持机
 参数名称：	输入/输出？	类型		描述
 输入		
 
 返  回  值：
 
 作      者	：于福勇
 日      期：2007-01-29

 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
//void Power_Down (void);

void print_consume_record (void);
#endif
